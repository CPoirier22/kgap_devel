#platform "uLCD-43PT"

var DisplayFont;
var num_power_ups, num_power_ups2, dual, profile1, hset_noise_canc;
var hndl;                                                   // Global Touch variable
var return_to_main;                                         // flag for returning to main screen
var pin_index;                                              // var to step across pin window

#CONST
    CR              13
    QUOTE           34
    BUFSIZE         80 // Max 128 chars    was 64, increased to 80 to eliminate buffer overrun on long DECT messages
    CMDLEN          8
    P1LEN           30
    PXLEN           10
#END

var combuf[BUFSIZE * 2];                                    // comm port circular buffer
var iCharCounter;                                           // used to count chars as they're read into DECTBuffer
var DECTBuffer[BUFSIZE];                                    // used to save DECT string once \r is received into combuf
var pDECTBuffer;                                            // pointer to DECTBuffer
var CMD[CMDLEN], param1[P1LEN], param2[PXLEN];              // buffers for DECT commands and parameters
var param3[PXLEN], param4[PXLEN], param5[PXLEN];            // buffers for DECT commands and parameters
var param6[PXLEN], param7[PXLEN], param8[PXLEN];            // buffers for DECT commands and parameters
var param9[PXLEN], param10[PXLEN], param11[PXLEN];          // buffers for DECT commands and parameters

func main()                                                 // no args = fn.4XE , with args = fn.4FN
    num_power_ups := 0;
    num_power_ups2 := 0;
    dual := 0;
    profile1 := 0;
    hset_noise_canc := 0;
    return_to_main := 0;                                    // clear flag to return to the main screen

    DisplayFont := FONT3;                                   // globalize the register display font
    txt_Set(FONT_ID, DisplayFont);                          // we can use FONT4 inherited from the parent program

    hndl := file_LoadImageControl("install.Dat", "install.Gci", 1);           // 4D Index = reach display index - 1 (4d starts at 0 instead of reach at 1)
    if (hndl == 0)
        repeat
            txt_MoveCursor(10, 20);
            txt_FGcolour(0xFFE0);
            print("LoadImageControl failed ");
            pause(200);
            gfx_Cls();
            pause(200);
            hndl := file_LoadImageControl("install.Dat", "install.Gci", 1);   // 4D Index = reach display index - 1 (4d starts at 0 instead of reach at 1)
        until(hndl);
    endif

    iCharCounter := 0;                                      // init the char counter
    pDECTBuffer := str_Ptr(DECTBuffer);                     // init the pointer to DECTBuffer
    com_Init(combuf, (BUFSIZE * 2), 0);                     // start up the comm port circular buffer with no qualifier so constantly receive chars

    install_screen();

    mem_Free(hndl);

    return return_to_main;
endfunc

func reset_display()
    gfx_BGcolour(0xFFFF);                                   // 0xFFFF == WHITE
    gfx_Cls();
    gfx_Set(SCREEN_MODE, LANDSCAPE_R);

    txt_FontID(DisplayFont);                                // select custom font
    txt_Width(1);                                           // font multiplier - not necessary if we get custom fonts working
    txt_Height(1);                                          // font multiplier - not necessary if we get custom fonts working
    txt_Bold(0);
    txt_Opacity(1);                                         // opaque, don't draw background pixels
    txt_FGcolour(0);                                        // black
    txt_BGcolour(0xFFFF);                                   // 0xFFFF == WHITE
endfunc

//---------------------------------------------------------------------
//  This sends out strings on COM1.  Needs to be hex values separated by spaces - so replace \x with a space from Reach code
//  Initially tried blocking code, but this spit out extra values based on the buffer size
//  So buffer would have to be dynamically scaled.  This is a brute force technique, seems to work OK
//
//---------------------------------------------------------------------
//
func out(var out_string)
    var l;                                                  // string pointer
    var m;                                                  // counter
    var hex_codes[30];                                      // array for our results
    var out_p;                                              // string buffer

    m := 0;
    out_p := str_Ptr(out_string);                           // raise a string pointer so we can use it

    while(str_GetHexW(&out_p, &hex_codes[m++]) != 0);       // scan through and pull out all of the hex numbers put in array

    for (l := 0; l < (m - 1); l++)                          // loop through and send out serial port
        serout(hex_codes[l]);                               // send out hex data
    next
endfunc

//---------------------------------------------------------------------
// This macro re-creates the reach button define macro
// n is a don't care, global var hndl covers this
// xy is location, type to be used later, text0 is a don't care
// bmp0 is the primary image, bmp1 needs to be handled tbd
//
//---------------------------------------------------------------------
//
func bd(var n, var x, var y, var type, var text0, var bmp0, var bmp1)
//////////
// CP: just to eliminate "notices" during compile from unused variables:
bmp1 := 0;
type := 0;
n := 0;
text0 := 0;
//////////
    img_Enable(hndl, bmp0);                                 // enable button
    img_ClearAttributes(hndl, bmp0, I_TOUCH_DISABLE);       // set to enable touch, only need to do this once
    img_SetWord(hndl, bmp0, IMAGE_FLAGS, (img_GetWord(hndl, bmp0, IMAGE_FLAGS) | I_STAYONTOP) & ~I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_SetPosition(hndl, bmp0, x, y);
    img_Show(hndl, bmp0);                                   // show button, only do this once
endfunc

//---------------------------------------------------------------------
// This macro re-creates the reach button define macro
// n is a don't care, global var hndl covers this
// xy is location, type to be used later, text0 is a don't care
// bmp0 is the primary image, bmp1 needs to be handled tbd
// keypad number box is 55x55,characters are 28x24, manually calced center offset
//
//---------------------------------------------------------------------
//
func bdc(var n, var x, var y, var font, var text0, var bmp0, var bmp1, var sizex, var sizey)

//////////
// CP: just to eliminate "notices" during compile from unused variables:
bmp1 := 0;
//////////
    img_Enable(hndl, bmp0);                                 // enable button
    img_ClearAttributes(hndl, bmp0, I_TOUCH_DISABLE);       // set to enable touch, only need to do this once
    img_SetWord(hndl, bmp0, IMAGE_FLAGS, (img_GetWord(hndl, bmp0, IMAGE_FLAGS) | I_STAYONTOP) & ~I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_SetPosition(hndl, bmp0, x, y);
    img_Show(hndl, bmp0);                                   // show button, only do this once

    txt_FontID(font);                                       // select custom font
    if (n < 15)                                             // for main install screen font
        txt_Width(1);
        txt_Height(1);
    else                                                    // for greeter pin screen number font
        txt_Width(2);
        txt_Height(2);
    endif
    txt_Bold(0);
    txt_Opacity(0);                                         // not opaque, draw background pixels
    txt_FGcolour(0);                                        // black

    gfx_MoveTo(x + ((sizex - strwidth(text0)) / 2), y + ((sizey - strheight()) / 2));   // strheight() uses previous strwidth calc
    print([STR]text0);
endfunc

//---------------------------------------------------------------------------------------
// MACRO: install_screen_setup
// setup various debug buttons
//
//---------------------------------------------------------------------
//
func install_screen_setup()
    var string_buffer[10];

    reset_display();
    img_Disable(hndl, ALL);                                 // Disable all objects , start with a clean slate

    bd(0, 430, 222, 1, "", 0, 0);                           // Setup the "Home" button

    if (profile1 == 0)
        to(string_buffer); print("MA11");                   // display the "MA11"  button
        bdc(2, 5, 5, DisplayFont, string_buffer, 2, 2, 45, 45);
    else
        to(string_buffer); print("MA10");                   // display the "MA10"  button
        bdc(1, 5, 5, DisplayFont, string_buffer, 1, 1, 45, 45);
    endif
    txt_FontID(FONT1);
    txt_Width(2);
    txt_Height(2);
    txt_Opacity(1);
    gfx_MoveTo(60, 12);
    print("Post MIC\nbeing used");

    if (hset_noise_canc == 0)
        to(string_buffer); print("ON");                     // display the "ON" HSet noise canceling button
        bdc(3, 5, 55, DisplayFont, string_buffer, 3, 3, 45, 45);
    else
        to(string_buffer); print("OFF");                    // display the "OFF" HSet noise canceling button
        bdc(4, 5, 55, DisplayFont, string_buffer, 4, 4, 45, 45);
    endif
    txt_FontID(FONT1);
    txt_Width(2);
    txt_Height(2);
    txt_Opacity(1);
    gfx_MoveTo(60, 62);
    print("HSet noise\ncanceling");

    bd(13, 5, 224, 1, "", 13, 13);                          // display the Greet Code button
    txt_FontID(FONT1);
    txt_Width(2);
    txt_Height(2);
    gfx_MoveTo(70, 232);
    print("Greet\nCode");

    to(string_buffer); print("STOP\n WD");                  // display the STOP WD button
    bdc(11, 160, 224, DisplayFont, string_buffer, 11, 11, 50, 50);
endfunc

//---------------------------------------------------------------------------------------
// MACRO: install_screen
// setup install screen
//
//---------------------------------------------------------------------
//
func install_screen()
    var nn, state, x, y;
    var string_buffer[30], p, i;
    var ch;

    install_screen_setup();                                 // setup header and help buttons

    touch_Set(TOUCH_ENABLE);                                // enable the touch screen

    nn := 99;

    out("FF FF 4D 12 02 40 00 40");                         // request Wentworth debug info again

    repeat
        state := touch_Get(TOUCH_STATUS);                   // save touchscreen status
        x := touch_Get(TOUCH_GETX);                         // Grab x and the
        y := touch_Get(TOUCH_GETY);                         // y coordinates of the touch

        if(state ==  TOUCH_PRESSED)
            nn := img_Touched(hndl, -1);                    // scan image list, looking for a touch
            //   0   blank/blank (Home)
            //  1/2  near/far (Inbound noise)
            //  3/4  on/off (HSet noise)
            //  5/6  not being used
            //  7/8  blank/blank (power ups)
            //  9/10 blank/blank (power ups 2)
            // 11/12 stop_wd/stopped (WD trigger)
            // 13/14 blank/blank (greet code)
            if (nn == 0)
                return_to_main := 1;                        // bottom right return button
            else if (nn == 1)
                img_Disable(hndl, nn);                      // disable current button
                to(string_buffer); print("MA11");
                bdc(2, 5, 5, DisplayFont, string_buffer, 2, 2, 45, 45);
                out("FF FF 4D 12 03 43 01 00 44");          // request_base_command 0
            else if (nn == 2)
                img_Disable(hndl, nn);                      // disable current button
                to(string_buffer); print("MA10");
                bdc(1, 5, 5, DisplayFont, string_buffer, 1, 1, 45, 45);
                out("FF FF 4D 12 03 43 01 01 45");          // request_base_command 1
            else if (nn == 3)
                img_Disable(hndl, nn);                      // disable current button
                to(string_buffer); print("OFF");
                bdc(4, 5, 55, DisplayFont, string_buffer, 4, 4, 45, 45);
                out("FF FF 4D 12 03 43 01 02 46");          // request_base_command 2
            else if (nn == 4)
                img_Disable(hndl, nn);                      // disable current button
                to(string_buffer); print("ON");
                bdc(3, 5, 55, DisplayFont, string_buffer, 3, 3, 45, 45);
                out("FF FF 4D 12 03 43 01 03 47");          // request_base_command 3
//            else if (nn == 5)
//                out("FF FF 4D 12 03 43 01 04 48");          // request_base_command 4
            else if (nn == 7)
                out("FF FF 4D 12 03 41 01 01 43");          // request_power_count_reset
            else if (nn == 9)
                out("FF FF 4D 12 03 41 01 02 44");          // request_power_count_reset2
            else if (nn == 11)
                img_Disable(hndl, ALL);                     // Disable all objects, wait for system to reset itself
                to(string_buffer); print("STOPPED");
                bdc(10, 160, 224, DisplayFont, string_buffer, 10, 10, 50, 50);
                out("FF FF 4D 12 03 43 01 07 4B");          // request_base_command 7
                pause(3000);
                SystemReset();
            else if (nn == 13)
                img_Disable(hndl, ALL);                     // Disable all objects
                out("FF FF 4D 12 03 42 01 01 44");          // tell base we want to save the greeter authorization code
            endif

            if ((nn > 0) && (nn < 5))
                p := str_Ptr(string_buffer);
                for(i := 0; i < 30; i++)
                    str_PutByte(p++, 0);                    // fill string with 0
                next
            endif

        endif

        // check for anything from DECT
        if (com_Count() > 0)
            while (com_Count() > 0)
                // Absolute non blocking code if the outside while is not present
                ch := serin();
                if (ch != -1)
                    updateDECTBuffer(ch);
                endif
            wend
        endif

    until (return_to_main);

endfunc

//---------------------------------------------------------------------------------------
// MACRO: pin
// Display PIN Screen
//  2/28/2011 DPM added * to box when key pressed
//  After 4 keypresses, master must stop allowing presses and go to the thumbs up/down screen
//  or it's possible to have *'s across the whole screen
//
//---------------------------------------------------------------------
//
func pin()
    var nn, state;
    var buffer[30];                                         // buffer for DECT string
    var ch;                                                 // char buffer for reading comm port

    pin_index := 57;

    img_Disable(hndl, ALL);                                 // Disable all objects
    draw_keypad();                                          // draw the keys
    touch_Set(TOUCH_ENABLE);                                // enable the touch screen

    repeat
        state := touch_Get(TOUCH_STATUS);                   // save touchscreen status
        if (state == TOUCH_PRESSED)
            nn := img_Touched(hndl, -1);                    // scan image list, looking for a touch
            if (nn == 0)
                return_to_main := 1;                        // bottom right return button
            else if (nn == 28)
                show_help_pin();                            // goto the help screen
                img_Disable(hndl, ALL);                     // Disable all objects
                draw_keypad();                              // redraw keypad on return
                pin_index := 57;                            // reset index to start
                touch_Set(TOUCH_ENABLE);                    // enable the touch screen
            else if (nn == 27)                              // this is the back key, redraw keypad
                draw_keypad();                              // refresh
                pin_index := 57;                            // reset index to start
                out("FF FF 4D 12 02 07 00 07");             // reset PIN digit index
            else if ((nn > 16) && (nn < 27))                // then we have a valid key pressed
                nn := nn - 16;
                if (nn == 10) nn := 0;
                to(buffer); print("FF FF 4D 12 03 06 01 ", [HEX2]nn, " ", [HEX2](6 + 1 + nn));      // set up buffer to send to DECT
                out(buffer);                                // tell base which key was pressed
                gfx_MoveTo(pin_index, 88);                  // walk * across number padprint("*");
                print("*");                                 // print *
                pin_index := pin_index + 33;                // increment
                if (pin_index > 156) pin_index := 156;      // stop from printing outside the box on an error, should not happen but just in case
            endif
        endif

        // check for anything from DECT
        if (com_Count() > 0)
            while (com_Count() > 0)
                // Absolute non blocking code if the outside while is not present
                ch := serin();
                if (ch != -1)
                    updateDECTBuffer(ch);
                endif
            wend
        endif

    until (return_to_main);

endfunc

//---------------------------------------------------------------------
// Shows help screen for PIN
//
//---------------------------------------------------------------------
//
func show_help_pin()
    var state;
    img_Disable(hndl, ALL);                                 // Disable all objects
    bd(29, 0, 0, 1, "", 29, 29);
    repeat
        state := touch_Get(TOUCH_STATUS);                   // save touchscreen status
    until (state == TOUCH_PRESSED);                         // return when screen is pressed anywhere
  endfunc

//---------------------------------------------------------------------
// draws PIN keypad
//
//---------------------------------------------------------------------
//
func draw_keypad()
    var string_buffer[3];
    gfx_BGcolour(0x001F);                                   // 0x001F == BLUE
    gfx_Cls();
    bdc(0,  430, 222, FONT1,  "",  0,  0, 45, 45);          // Setup the "Home" button.

    bd(15,   0,  0, 1, "", 15, 15);                         // Display the "Set PIN" banner
    bd(16,  48, 75, 1, "", 16, 16);                         // Display an empty gray box
    bd(16,  81, 75, 1, "", 16, 16);                         // Display an empty gray box
    bd(16, 114, 75, 1, "", 16, 16);                         // Display an empty gray box
    bd(16, 147, 75, 1, "", 16, 16);                         // Display an empty gray box

    to(string_buffer); print("1");                          // display the "1" key
    bdc(17, 217,  47, FONT1, string_buffer, 17, 17,  55, 55);
    to(string_buffer); print("2");                          // display the "2" key
    bdc(18, 273,  47, FONT1, string_buffer, 18, 18,  55, 55);
    to(string_buffer); print("3");                          // display the "3" key
    bdc(19, 329,  47, FONT1, string_buffer, 19, 19,  55, 55);
    to(string_buffer); print("4");                          // display the "4" key
    bdc(20, 217, 103, FONT1, string_buffer, 20, 20,  55, 55);
    to(string_buffer); print("5");                          // display the "5" key
    bdc(21, 273, 103, FONT1, string_buffer, 21, 21,  55, 55);
    to(string_buffer); print("6");                          // display the "6" key
    bdc(22, 329, 103, FONT1, string_buffer, 22, 22,  55, 55);
    to(string_buffer); print("7");                          // display the "7" key
    bdc(23, 217, 159, FONT1, string_buffer, 23, 23,  55, 55);
    to(string_buffer); print("8");                          // display the "8" key
    bdc(24, 273, 159, FONT1, string_buffer, 24, 24,  55, 55);
    to(string_buffer); print("9");                          // display the "9" key
    bdc(25, 329, 159, FONT1, string_buffer, 25, 25,  55, 55);
    to(string_buffer); print("0");                          // display the "0" key
    bdc(26, 273, 215, FONT1, string_buffer, 26, 26,  55, 55);
    bd(27, 217, 220, 1, "", 27, 27);                        // display the back key

    bd(28, 380, 222, 1, "", 28, 28);                        // Setup the "Help" button.
endfunc

////////////////////////////////
// process serial port traffic
//
func updateDECTBuffer(var ch)
    var n, p;
    if (ch == CR)                                           // CR is the response command; if the buffer needs saving, do something with it HERE
        iCharCounter := 0;                                  // iCharCounter is reset to 0
        parseDECTBuffer();
        processDECTCommand();                               // Call function to process response in DECTBuffer

        p := str_Ptr(DECTBuffer);
        for(n := 0; n < BUFSIZE; n++)
            str_PutByte(p++, 0);                            // fill string with 0
        next
    else
        if (iCharCounter > (BUFSIZE * 2)) iCharCounter--;   // Protect from overflow
        str_PutByte(pDECTBuffer + iCharCounter++, ch);      // ch is placed into DECTBuffer[iCharCounter]
    endif
endfunc

////////////////////////////////
// parse the command from the DECT and pass it along
//
func processDECTCommand()
    var p, p1, p2, p3, p4, p5;
    var string_buffer[10];

    p  := str_Ptr(CMD);
    p1 := str_Ptr(param1);
    p5 := str_Ptr(param5);

    switch
        case (str_MatchI(&p, "m"))
            switch
                case (str_MatchI(&p1, "show_wentworth_debug:single"))
                    p2 := str_Ptr(param2);
                    str_GetW(&p2, &num_power_ups);          // Save the # of power ups
                    txt_FontID(FONT1);
                    txt_Width(2);
                    txt_Height(2);
                    txt_Opacity(1);
                    bd(7, 5, 164, 1, "", 7, 7);             // display the power ups button
                    gfx_MoveTo(70, 180);
                    print("# power ups: ", num_power_ups, "     ");
                    break;
                case (str_MatchI(&p1, "show_wentworth_debug:dual"))
                    dual := 1;
                    p2 := str_Ptr(param2);
                    str_GetW(&p2, &num_power_ups);          // Save the # of power ups
                    p3 := str_Ptr(param3);
                    str_GetW(&p3, &num_power_ups2);         // Save the # of power ups 2
                    txt_FontID(FONT1);
                    txt_Width(2);
                    txt_Height(2);
                    txt_Opacity(1);
                    bd(7, 5, 164, 1, "", 7, 7);             // display the power ups button
                    gfx_MoveTo(65, 180);
                    print("#pups1: ", num_power_ups, "     ");
                    bd(9, 230, 164, 1, "", 9, 9);          // display the power ups 2 button
                    gfx_MoveTo(290, 180);
                    print("#pups2: ", num_power_ups2, "     ");
                    break;
                case (str_MatchI(&p1, "thumbs_dn"))         // PIN was entered incorrectly
                    draw_keypad();                          // refresh
                    pin_index := 57;                        // reset index to start
                    out("FF FF 4D 12 02 07 00 07");         // reset PIN digit index
                    img_Enable(hndl, 30);                   // display thumbs down
                    img_SetPosition(hndl, 30, 72, 146);
                    img_Show(hndl, 30);
                    break;
                case (str_MatchI(&p1, "main"))              // this case has to be AFTER anything else with "main" in it so it doesn't trigger falsely
                    return_to_main := 1;                    // set flag to return to the main screen
                    break;
                case (str_MatchI(&p1, "pin"))
                    pin();
                    break;
            endswitch
            break;
        case (str_MatchI(&p, "bdc"))                        // handle bdc calls
            switch
                case (str_MatchI(&p5, "MA10"))
                    p4 := str_Ptr(param4);
                    str_GetW(&p4, &profile1);               // Save the profile1 status
                    if (profile1 == 20)
                        profile1 := 1;
                    else
                        profile1 := 0;
                    endif
                    if (profile1 == 1)
                        img_Disable(hndl, 2);               // disable current button
                        to(string_buffer); print("MA10");
                        bdc(1, 5, 5, DisplayFont, string_buffer, 1, 1, 45, 45);
                    else
                        img_Disable(hndl, 1);               // disable current button
                        to(string_buffer); print("MA11");
                        bdc(2, 5, 5, DisplayFont, string_buffer, 2, 2, 45, 45);
                    endif
                    break;
                case (str_MatchI(&p5, "ON"))
                    p4 := str_Ptr(param4);
                    str_GetW(&p4, &hset_noise_canc);        // Save the hset noise canceling status
                    hset_noise_canc := hset_noise_canc - 20;
                    if (hset_noise_canc == 1)
                        img_Disable(hndl, 3);               // disable current button
                        to(string_buffer); print("OFF");
                        bdc(4, 5, 55, DisplayFont, string_buffer, 4, 4, 45, 45);
                    else
                        img_Disable(hndl, 4);               // disable current button
                        to(string_buffer); print("ON");
                        bdc(3, 5, 55, DisplayFont, string_buffer, 3, 3, 45, 45);
                    endif
                    break;
            endswitch
            break;
        case (str_MatchI(&p, "r"))                          // draw a blue rectangle to erase thumbs down
            if (str_MatchI(&p1, "72")) gfx_RectangleFilled(72, 146, 132, 206, 0x001F);
            break;
    endswitch

endfunc

func parseDECTBuffer()
    var buffer[BUFSIZE];                                    // BUFSIZE character buffer for a source string
    var n;                                                  // general purpose counter
    var cmdFound;                                           // flag tracking whether or not a command was parsed
    var p, p1, p_cnt;                                       // temp ptrs, temp pointer counter
    var char;                                               // character holder

    p := str_Ptr(buffer);
    for(n := 0; n < BUFSIZE; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next

    to(buffer); print([STR]DECTBuffer);                     // save a local copy of the DECTBuffer
    p := str_Ptr(CMD);
    for(n := 0; n < CMDLEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next
    p := str_Ptr(param1);
    for(n := 0; n < P1LEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next
    p := str_Ptr(param2);
    for(n := 0; n < PXLEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next
    p := str_Ptr(param3);
    for(n := 0; n < PXLEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next
    p := str_Ptr(param4);
    for(n := 0; n < PXLEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next
    p := str_Ptr(param5);
    for(n := 0; n < PXLEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next
    p := str_Ptr(param6);
    for(n := 0; n < PXLEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next
    p := str_Ptr(param7);
    for(n := 0; n < PXLEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next
    p := str_Ptr(param8);
    for(n := 0; n < PXLEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next
    p := str_Ptr(param9);
    for(n := 0; n < PXLEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next
    p := str_Ptr(param10);
    for(n := 0; n < PXLEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next
    p := str_Ptr(param11);
    for(n := 0; n < PXLEN; n++)
        str_PutByte(p++, 0);                                // fill string with 0
    next

    cmdFound := 0;                                          // init
    p := str_Ptr(buffer);                                   // re-init pointer to buffer
    p_cnt := str_Ptr(buffer);                               // re-init pointer to buffer; used as moving index

    if (strlen(buffer) == 0) goto done_parsing;             // no need to parse an empty string

    // looking for CMD
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, it was all whitespace
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of CMD
    cmdFound := 1;
    p1 := str_Ptr(CMD);                                     // init p1 pointer to CMD string
    str_PutByte(p1++, char);
    while (str_GetC(&p_cnt, &char))                         // pull the next char off of buffer[p_cnt]
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

    // looking for param1
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, we're done
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of param1
    p1 := str_Ptr(param1);
    str_PutByte(p1++, char);
    // get the rest of param1
    while (str_GetC(&p_cnt, &char))
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

    // looking for param2
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, we're done
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of param2
    p1 := str_Ptr(param2);
    str_PutByte(p1++, char);
    // get the rest of param2
    while (str_GetC(&p_cnt, &char))
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

    // looking for param3
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, we're done
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of param3
    p1 := str_Ptr(param3);
    str_PutByte(p1++, char);
    // get the rest of param3
    while (str_GetC(&p_cnt, &char))
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

    // looking for param4
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, we're done
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of param4
    p1 := str_Ptr(param4);
    str_PutByte(p1++, char);
    // get the rest of param4
    while (str_GetC(&p_cnt, &char))
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

    // looking for param5
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, we're done
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of param5
    p1 := str_Ptr(param5);
    str_PutByte(p1++, char);
    // get the rest of param5
    while (str_GetC(&p_cnt, &char))
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

    // looking for param6
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, we're done
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of param6
    p1 := str_Ptr(param6);
    str_PutByte(p1++, char);
    // get the rest of param6
    while (str_GetC(&p_cnt, &char))
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

    // looking for param7
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, we're done
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of param7
    p1 := str_Ptr(param7);
    str_PutByte(p1++, char);
    // get the rest of param7
    while (str_GetC(&p_cnt, &char))
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

    // looking for param8
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, we're done
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of param8
    p1 := str_Ptr(param8);
    str_PutByte(p1++, char);
    // get the rest of param8
    while (str_GetC(&p_cnt, &char))
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

    // looking for param9
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, we're done
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of param9
    p1 := str_Ptr(param9);
    str_PutByte(p1++, char);
    // get the rest of param9
    while (str_GetC(&p_cnt, &char))
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

    // looking for param10
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, we're done
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of param10
    p1 := str_Ptr(param10);
    str_PutByte(p1++, char);
    // get the rest of param10
    while (str_GetC(&p_cnt, &char))
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

    // looking for param11
    while (str_GetC(&p_cnt, &char))
        if (!isspace(char)) break;                          // skip any leading whitespace or "
    wend
    p_cnt--;                                                // if we've reached the end of the string and the last char is whitespace, we're done
    if (str_GetC(&p_cnt, &char) && isspace(char)) goto done_parsing;
    // this is the first char of param11
    p1 := str_Ptr(param11);
    str_PutByte(p1++, char);
    // get the rest of param11
    while (str_GetC(&p_cnt, &char))
        if (isspace(char)) break;
        str_PutByte(p1++, char);
    wend
    if (!str_GetC(&p_cnt, &char)) goto done_parsing;        // if we've reached the end of the string, we're done
    p_cnt--;

done_parsing:

endfunc


